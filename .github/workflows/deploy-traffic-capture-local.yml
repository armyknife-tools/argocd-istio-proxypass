name: Deploy Traffic Capture (Local)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
      namespace:
        description: 'Target namespace'
        required: true
        type: string

jobs:
  generate-manifest:
    name: Generate Deployment Manifest
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up environment
      run: |
        echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
        echo "NAMESPACE=${{ github.event.inputs.namespace }}" >> $GITHUB_ENV

    - name: Generate manifests
      run: |
        echo "Generating manifests for namespace: $NAMESPACE"
        
        # Create output directory
        mkdir -p output
        
        # Generate the manifest using kustomize
        cat > output/kustomization.yaml <<EOF
        apiVersion: kustomize.config.k8s.io/v1beta1
        kind: Kustomization
        namespace: $NAMESPACE
        resources:
        - ../../overlays/$ENVIRONMENT
        EOF
        
        # Build the complete manifest
        kubectl kustomize output/ > output/deploy-$NAMESPACE.yaml
        
        # Add namespace creation and labeling at the beginning
        cat > output/complete-deploy-$NAMESPACE.yaml <<EOF
        ---
        apiVersion: v1
        kind: Namespace
        metadata:
          name: $NAMESPACE
          labels:
            istio-injection: enabled
        ---
        EOF
        
        # Append the generated manifests
        cat output/deploy-$NAMESPACE.yaml >> output/complete-deploy-$NAMESPACE.yaml
        
        echo "Manifest generated successfully"

    - name: Upload manifest
      uses: actions/upload-artifact@v3
      with:
        name: deployment-manifest-${{ github.event.inputs.namespace }}
        path: output/complete-deploy-${{ github.event.inputs.namespace }}.yaml
        retention-days: 7

    - name: Create deployment instructions
      run: |
        cat > output/deploy-instructions.md <<EOF
        # Deployment Instructions for $NAMESPACE
        
        Generated from commit: ${{ github.sha }}
        Environment: $ENVIRONMENT
        Time: $(date)
        
        ## Steps to deploy:
        
        1. Download the manifest artifact from this workflow run
        2. Review the manifest for security
        3. Deploy locally:
        
        \`\`\`bash
        # Apply the manifest
        kubectl apply -f complete-deploy-$NAMESPACE.yaml
        
        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod --all -n $NAMESPACE --timeout=300s
        
        # Verify deployment
        kubectl get pods -n $NAMESPACE
        \`\`\`
        
        ## To test the deployment:
        
        \`\`\`bash
        # Test traffic capture
        TEST_ID="test-\$(date +%s)"
        kubectl exec -n $NAMESPACE deployment/test-client -c client -- \\
          curl -s "http://example-app/test/\$TEST_ID"
        
        # Check if captured
        kubectl exec -n $NAMESPACE deployment/traffic-collector -- \\
          wget -qO- http://localhost:9000/query | grep "\$TEST_ID"
        \`\`\`
        
        ## To remove:
        
        \`\`\`bash
        kubectl delete -f complete-deploy-$NAMESPACE.yaml
        \`\`\`
        EOF
        
        # Also create a test script
        cat > output/test-deployment.sh <<'SCRIPT'
        #!/bin/bash
        NAMESPACE="$1"
        if [ -z "$NAMESPACE" ]; then
          echo "Usage: $0 <namespace>"
          exit 1
        fi
        
        echo "Testing deployment in namespace: $NAMESPACE"
        
        # Basic test
        TEST_ID="test-$(date +%s)"
        echo "1. Testing connectivity..."
        kubectl exec -n $NAMESPACE deployment/test-client -c client -- \
          curl -s "http://example-app/test/$TEST_ID" && echo "âœ“ Connected"
        
        sleep 3
        
        # Check capture
        echo "2. Checking traffic capture..."
        kubectl exec -n $NAMESPACE deployment/traffic-collector -- \
          wget -qO- http://localhost:9000/query 2>/dev/null | grep -q "$TEST_ID" && \
          echo "âœ“ Traffic captured" || echo "âœ— Traffic NOT captured"
        
        # Test masking
        echo "3. Testing data masking..."
        MASK_ID="mask-$(date +%s)"
        kubectl exec -n $NAMESPACE deployment/test-client -c client -- \
          curl -s -X POST "http://example-app/$MASK_ID" \
          -H "Content-Type: application/json" \
          -d '{"ssn":"123-45-6789","creditCard":"4111-1111-1111-1234"}' >/dev/null
        
        sleep 3
        
        MASKED=$(kubectl exec -n $NAMESPACE deployment/traffic-collector -- \
          wget -qO- http://localhost:9000/query 2>/dev/null | grep "$MASK_ID" -A 20)
        
        if echo "$MASKED" | grep -q "123-45-6789"; then
          echo "âœ— Data NOT masked"
        else
          echo "âœ“ Data properly masked"
        fi
        
        # Stats
        echo -e "\n4. Collector statistics:"
        kubectl exec -n $NAMESPACE deployment/traffic-collector -- \
          wget -qO- http://localhost:9000/stats 2>/dev/null
        SCRIPT
        
        chmod +x output/test-deployment.sh

    - name: Upload deployment package
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package-${{ github.event.inputs.namespace }}
        path: |
          output/complete-deploy-${{ github.event.inputs.namespace }}.yaml
          output/deploy-instructions.md
          output/test-deployment.sh
        retention-days: 7

    - name: Output summary
      run: |
        echo "## Deployment Package Generated" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Namespace:** $NAMESPACE" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** $ENVIRONMENT" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Download the deployment package from the Artifacts section" >> $GITHUB_STEP_SUMMARY
        echo "2. Review the generated manifest" >> $GITHUB_STEP_SUMMARY
        echo "3. Deploy locally using kubectl" >> $GITHUB_STEP_SUMMARY
        echo "4. Run the included test script" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "No cluster credentials are exposed in this workflow! ðŸ”’" >> $GITHUB_STEP_SUMMARY