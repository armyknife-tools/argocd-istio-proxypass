name: Test Traffic Capture

on:
  pull_request:
    branches:
      - main
    paths:
      - 'overlays/**'
      - 'base/**'
      - '.github/workflows/test-traffic-capture.yml'
  workflow_dispatch:
    inputs:
      namespace:
        description: 'Test namespace'
        required: false
        default: 'traffic-capture-test'
        type: string

env:
  TEST_NAMESPACE: ${{ github.event.inputs.namespace || format('traffic-capture-pr-{0}', github.event.pull_request.number || github.run_id) }}

jobs:
  test:
    name: Test Traffic Capture
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
    - name: Configure kubectl
      run: |
        # Configure kubectl (requires KUBECONFIG secret)
        echo "${{ secrets.KUBECONFIG }}" | base64 -d > /tmp/kubeconfig
        export KUBECONFIG=/tmp/kubeconfig
        
        # Verify connection
        kubectl cluster-info

    - name: Create test namespace
      run: |
        export KUBECONFIG=/tmp/kubeconfig
        kubectl create namespace $TEST_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
        # Note: istio-injection label will be added by the PreSync hook

    - name: Deploy test environment
      run: |
        export KUBECONFIG=/tmp/kubeconfig
        
        # Apply kustomization for dev environment
        kubectl apply -k overlays/dev -n $TEST_NAMESPACE
        
        # Wait for deployments
        kubectl wait --for=condition=available deployment --all -n $TEST_NAMESPACE --timeout=300s
        kubectl wait --for=condition=ready pod --all -n $TEST_NAMESPACE --timeout=300s

    - name: Run traffic capture tests
      run: |
        export KUBECONFIG=/tmp/kubeconfig
        
        # Create test script
        cat > /tmp/test-capture.sh << 'EOF'
        #!/bin/bash
        set -e
        
        NAMESPACE=$1
        echo "Testing traffic capture in namespace: $NAMESPACE"
        
        # Test 1: Basic GET request
        echo "Test 1: Basic GET request"
        TEST_ID="test-$(date +%s)"
        kubectl exec -n $NAMESPACE deployment/test-client -c client -- \
          curl -s "http://example-app/test/$TEST_ID" || exit 1
        sleep 2
        
        # Verify capture
        if kubectl exec -n $NAMESPACE deployment/traffic-collector -- \
          wget -qO- http://localhost:9000/query 2>/dev/null | grep -q "$TEST_ID"; then
          echo "✅ Basic GET captured"
        else
          echo "❌ Basic GET NOT captured"
          exit 1
        fi
        
        # Test 2: Sensitive data masking
        echo "Test 2: Sensitive data masking"
        MASK_ID="mask-$(date +%s)"
        kubectl exec -n $NAMESPACE deployment/test-client -c client -- \
          curl -s -X POST "http://example-app/$MASK_ID" \
          -H "Content-Type: application/json" \
          -d '{"ssn":"123-45-6789","creditCard":"4111-1111-1111-1234"}' || exit 1
        sleep 2
        
        # Check masking
        MASKED_DATA=$(kubectl exec -n $NAMESPACE deployment/traffic-collector -- \
          wget -qO- http://localhost:9000/query 2>/dev/null | grep "$MASK_ID" -A 20)
        
        if echo "$MASKED_DATA" | grep -q "123-45-6789"; then
          echo "❌ SSN NOT masked - SECURITY FAIL"
          exit 1
        else
          echo "✅ SSN properly masked"
        fi
        
        if echo "$MASKED_DATA" | grep -q "4111-1111-1111-1234"; then
          echo "❌ Credit card NOT masked - SECURITY FAIL"
          exit 1
        else
          echo "✅ Credit card properly masked"
        fi
        
        # Test 3: Verify sidecars
        echo "Test 3: Sidecar configuration"
        PROXY_CONTAINERS=$(kubectl get pod -n $NAMESPACE -l app=passthrough-proxy -o jsonpath='{.items[0].spec.containers[*].name}')
        if [[ "$PROXY_CONTAINERS" == "proxy" ]]; then
          echo "✅ Proxy has no sidecar (correct)"
        else
          echo "❌ Proxy has sidecar: $PROXY_CONTAINERS"
          exit 1
        fi
        
        echo "All tests passed!"
        EOF
        
        chmod +x /tmp/test-capture.sh
        /tmp/test-capture.sh $TEST_NAMESPACE

    - name: Collect test results
      if: always()
      run: |
        export KUBECONFIG=/tmp/kubeconfig
        
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Namespace**: $TEST_NAMESPACE" >> $GITHUB_STEP_SUMMARY
        echo "- **PR**: #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Pod Status" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        kubectl get pods -n $TEST_NAMESPACE >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
        echo "### Collector Statistics" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        kubectl exec -n $TEST_NAMESPACE deployment/traffic-collector -- \
          wget -qO- http://localhost:9000/stats 2>/dev/null >> $GITHUB_STEP_SUMMARY || echo "No stats available"
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Cleanup
      if: always()
      run: |
        export KUBECONFIG=/tmp/kubeconfig
        
        # Delete test namespace
        kubectl delete namespace $TEST_NAMESPACE --ignore-not-found --wait=false
        
        # Clean up kubeconfig
        rm -f /tmp/kubeconfig